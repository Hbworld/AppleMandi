/**
 * Dependencies added alphabetically
 */
ext {

    //Version
    androidXActivityVersion = '1.6.1'
    androidXCoreVersion = '1.9.0'
    androidXDatastoreVersion = '1.0.0'
    androidXNavigationVersion = '2.5.3'
    androidXViewModelVersion = '2.5.1'
    annotationVersion = '1.1.0'
    appCompatVersion = '1.6.1'
    constraintlayoutVersion = '2.0.4'
    daggerHiltVersion = '2.42'
    firebaseVersion = '31.2.2'
    materialVersion = '1.9.0-alpha02'
    okHttp3Version = '4.10.0'
    retrofitConverterVersion = '2.9.0'
    retrofitMoshiVersion = '2.9.0'
    retrofitVersion = '2.9.0'

    //Packages
    androidXActivityPackage = 'androidx.activity'
    androidXCorePackage = 'androidx.core'
    androidXDatastorePackage = 'androidx.datastore'
    androidXNavigationPackage = 'androidx.navigation'
    androidXViewModelPackage = 'androidx.lifecycle'
    annotationPackage = 'androidx.annotation'
    appCompatPackage = 'androidx.appcompat'
    constraintlayoutPackage = 'androidx.constraintlayout'
    daggerHiltPackage = 'com.google.dagger'
    firebasePackage = 'com.google.firebase'
    materialPackage = 'com.google.android.material'
    okHttp3Package = 'com.squareup.okhttp3'
    retrofitPackage = 'com.squareup.retrofit2'


    //Solo Use Dependencies
    androidXActivityDependency = buildDependency(androidXActivityPackage, 'activity-ktx', androidXActivityVersion)
    androidXCoreDependency = buildDependency(androidXCorePackage, 'core-ktx', androidXCoreVersion)
    androidXDatastoreDependency = buildDependency(androidXDatastorePackage, 'datastore-preferences', androidXDatastoreVersion)
    androidXViewModelDependency = buildDependency(androidXViewModelPackage, 'lifecycle-viewmodel-ktx', androidXViewModelVersion)
    annotationDependency = buildDependency(annotationPackage, 'annotation', annotationVersion)
    appCompatDependency = buildDependency(appCompatPackage, 'appcompat', appCompatVersion)
    constraintlayoutDependency = buildDependency(constraintlayoutPackage, 'constraintlayout', constraintlayoutVersion)
    materialDependency = buildDependency(materialPackage, 'material', materialVersion)


    //Group Use Dependencies

    androidXNavigationDependencies = [
            fragment: buildDependency(androidXNavigationPackage, 'navigation-fragment-ktx', androidXNavigationVersion),
            ui      : buildDependency(androidXNavigationPackage, 'navigation-ui-ktx', androidXNavigationVersion)
    ]
    daggerHiltDependencies = [
            daggerHilt: buildDependency(daggerHiltPackage, 'hilt-android', daggerHiltVersion),
            compiler  : buildDependency(daggerHiltPackage, 'hilt-android-compiler', daggerHiltVersion)
    ]
    firebaseDependencies = [
            BoM: buildDependency(firebasePackage, 'firebase-bom', firebaseVersion),
            analytics  : buildBoMDependency(firebasePackage, 'firebase-analytics-ktx'),
            auth  : buildBoMDependency(firebasePackage, 'firebase-auth-ktx'),
            crashlytics  : buildBoMDependency(firebasePackage, 'firebase-crashlytics-ktx'),
            database  : buildBoMDependency(firebasePackage, 'firebase-database-ktx'),
            messaging  : buildBoMDependency(firebasePackage, 'firebase-messaging-ktx'),
            perf  : buildBoMDependency(firebasePackage, 'firebase-perf-ktx'),
            storage  : buildBoMDependency(firebasePackage, 'firebase-storage-ktx')
    ]
    okHttp3Dependencies = [
            okhttp: buildDependency(okHttp3Package, 'okhttp', okHttp3Version),
            logging  : buildDependency(okHttp3Package, 'logging-interceptor', okHttp3Version)
    ]
    retrofitDependencies = [
            retrofit: buildDependency(retrofitPackage, 'retrofit', retrofitVersion),
            gson    : buildDependency(retrofitPackage, 'converter-gson', retrofitConverterVersion),
            moshi    : buildDependency(retrofitPackage, 'converter-moshi', retrofitMoshiVersion)
    ]

}

static String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}

static String buildBoMDependency(String pack, String dependency) {
    return "${pack}:${dependency}"
}